'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PermissionsController = PermissionsController;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

var _jwtHelper = require('../utils/jwtHelper');

var _SessionController = require('./SessionController');

var _Storage = require('../Storage');

var _constants = require('../utils/constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var userPermissions = [];

function PermissionsController(options) {
  var sessionController = new _SessionController.SessionController(options);
  var storage = new _Storage.Storage(options);

  var setPermissionsForUser = function setPermissionsForUser(user) {
    if (user) {
      var permissions = _underscore2.default.flatten(user.groups.map(function (group) {
        return group.groupPermissions.map(function (permission) {
          return permission;
        });
      }));
      userPermissions = permissions;

      storage.set(_constants.PERMISSIONS_LS_KEY, permissions);

      return permissions;
    }
  };

  var getPermissions = function getPermissions() {
    return userPermissions.length > 0 ? userPermissions : storage.get(_constants.PERMISSIONS_LS_KEY);
  };

  /** 
   * takes an action 'ENTITY_TYPE.ACTION' (cloudplat-offer.view) and checks it against the user's permissions
  */
  var isAuthorized = function isAuthorized(action) {
    return _underscore2.default.contains(getPermissions(), action);
  };

  /**
   * Public shorthand to call a function only if the action is allowed by the user permissions
   * Usage: 
   * export const fnAuth = (action,fn)=>window.Oly.fnAuth(action,fn);
   * <button onClick={()=>fnAuth('test.action',this.onTestClick.bind(this))}>Test BUTTON</button>
   * @param {*} action 
   * @param {*} fn 
   */
  var fnAuth = function fnAuth(action, fn) {
    return isAuthorized(action) ? fn.call(fn) : false;
  };

  var loggedIn = function loggedIn() {
    // Checks if there is a saved token and it's still valid
    var token = sessionController.getToken();

    window.Oly.meta.loggedIn = !!token && !(0, _jwtHelper.isTokenExpired)(token);
    return window.Oly.meta.loggedIn;
  };

  return {
    isAuthorized: isAuthorized,
    getPermissions: getPermissions,
    setPermissionsForUser: setPermissionsForUser,
    fnAuth: fnAuth,
    loggedIn: loggedIn
  };
}