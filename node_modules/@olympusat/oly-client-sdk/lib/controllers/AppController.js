'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AppController = AppController;

var _AppsModel = require('../models/AppsModel');

var _UsersModel = require('../models/UsersModel');

var _PermissionsController = require('./PermissionsController');

var _Storage = require('../Storage');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _fun = require('../utils/fun');

var _constants = require('../utils/constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function AppController(options) {
  var appsModel = new _AppsModel.AppsModel(options);
  var usersModel = new _UsersModel.UsersModel(options);
  var permissionsController = new _PermissionsController.PermissionsController(options);
  var storage = new _Storage.Storage(options);

  var setOlyAuthApp = function setOlyAuthApp(app) {
    window.Oly.meta.app = app;
    (0, _fun.storage_setItem)(_constants.APP_LS_KEY, app);
  };

  var getCachedOlyAuthApp = function getCachedOlyAuthApp() {
    return (0, _fun.storage_getItem)(_constants.APP_LS_KEY);
  };

  /** 
  * Get the current logged in user
  */
  var getCurrentApp = function getCurrentApp(appSlug) {
    return new _bluebird2.default(function (resolve, reject) {
      var appCache = window.Oly && window.Oly.meta.app.hasOwnProperty('entityUUID') ? window.Oly.meta.app : getCachedOlyAuthApp();

      if (appCache && options.allowCaching) {
        resolve(appCache);
        return true;
      } else {
        return appsModel.getBySlug({ appSlug: appSlug || options.appSlug }).then(function (app) {
          setOlyAuthApp(app);

          resolve(app);
        });
      }
    });
  };

  var listActive = appsModel.listActive;

  return {
    getCurrentApp: getCurrentApp,
    getCachedOlyAuthApp: getCachedOlyAuthApp,
    listActive: listActive
  };
} /**
   * Handles interfacing with UserData functionality ie. getting & setting user data
   */