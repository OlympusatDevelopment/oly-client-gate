'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserController = UserController;

var _CognitoModel = require('../models/CognitoModel');

var _UsersModel = require('../models/UsersModel');

var _PermissionsController = require('./PermissionsController');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _fun = require('../utils/fun');

var _constants = require('../utils/constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Handles interfacing with UserData functionality ie. getting & setting user data
 */
function UserController(options) {
  var _this = this;

  var cognitoModel = new _CognitoModel.CognitoModel(options);
  var usersModel = new _UsersModel.UsersModel(options);
  var permissionsController = new _PermissionsController.PermissionsController(options);

  var setOlyAuthUser = function setOlyAuthUser(user) {
    // Permissions.setPermissionsForUser(user);
    (0, _fun.storage_setItem)(_constants.USER_LS_KEY, user);
  };

  // const getOlyAuthUserFromStorage=()=>{
  var getOlyAuthUser = function getOlyAuthUser() {
    return (0, _fun.storage_getItem)(_constants.USER_LS_KEY);
  };

  /**
  * Get the current logged in user
  */
  var getCurrentUser = function getCurrentUser(sub) {
    var self = _this;

    return new _bluebird2.default(function (resolve, reject) {
      var userCache = window.Oly && window.Oly.meta.user && window.Oly.meta.user.hasOwnProperty('email') ? window.Oly.meta.user : getOlyAuthUser();

      // Used cached user for speed
      // @todo remove this once the api is faster
      if (userCache && options.allowCaching) {
        window.Oly.meta.user = userCache;
        setOlyAuthUser(userCache);
        console.log('USED CACHE USER');
        resolve(userCache);
        return true;
      } else {
        return usersModel.getCurrent().then(function (us) {
          if (us && us.user) {
            us.user.aggregatedPermissions = permissionsController.setPermissionsForUser(us.user);

            window.Oly.meta.user = us.user;
            setOlyAuthUser(us.user);
            resolve(us.user);
          } else {
            resolve({});
          }
        });
      }
    });
  };

  return {
    getCurrentUser: getCurrentUser,
    getOlyAuthUser: getOlyAuthUser,
    setOlyAuthUser: setOlyAuthUser
  };
}