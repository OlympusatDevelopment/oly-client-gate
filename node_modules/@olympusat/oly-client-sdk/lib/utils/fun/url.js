'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Fn Index: 
 *  url_set
 *  url_get
 *  url_makeQueryString
 *  url_writeQueryString
 *  url_clearQueryString
 *  url_readQueryString
 *  url_parseParams
 *  url_getParam
 *  url_getPageParams
 *  url_makeObjFromQueryString
 */

var url_set = exports.url_set = function url_set(path) {
  window.location.href = path;
};

var url_get = exports.url_get = function url_get() {
  return window.location.href;
};

/**
 * Makes a query string from a specifically formatted object
 *        {
 *          date : {
 *           start : 23423429898,
 *           end : 243852437598
 *          },
 *          something : 'A string of some sort',
 *        }
 * @param {*} queryObject 
 */
var url_makeQueryString = exports.url_makeQueryString = function url_makeQueryString(queryObject) {

  // Remove anything with a null value
  // Handles single values and range values
  Object.keys(queryObject).forEach(function (key) {
    return (queryObject[key] == null || queryObject[key].hasOwnProperty('start') && queryObject[key].hasOwnProperty('end') && queryObject[key].start == null && queryObject[key].end == null) && delete queryObject[key];
  });

  var queryString = _.map(queryObject, function (v, k) {
    var attribute = k,
        value = v,
        tmp_query = '';

    // Handle array values by using key name as attribute and each value separately
    if (_.isArray(value)) {
      value.forEach(function (val) {
        tmp_query = tmp_query + '&' + attribute + '=' + val;
      });
    } else if (value.hasOwnProperty('start') && value.hasOwnProperty('end')) {
      tmp_query = attribute + '--start=' + value.start + '&' + attribute + '--end=' + value.end;
    } else {
      tmp_query = attribute + '=' + value;
    }

    return tmp_query;
  }).reduce(function (sum, query) {

    //Handle missing &
    if (query.charAt(0) !== '&') {
      query = '&' + query;
    }

    // Combine query strings
    return sum + query;
  }, '');

  // Handle the ? character at the beginning of the string
  if (queryString.charAt(0) === '&') {
    queryString = queryString.replace(/^&/, '?');
  } else if (queryString.charAt(0) !== '&' || queryString.charAt(0) !== '?') {
    queryString = '?' + queryString;
  }

  return queryString;
};

/**
 * Writes the query string to the url
 * @param queryString
 * @param options
 * @private
 */
var url_writeQueryString = exports.url_writeQueryString = function url_writeQueryString(queryString) {
  // @todo add url_encode and base^4 encode and decode to the write system
  // Only allow if the config file specifies
  if (options.writeQueryStringToURL && (queryString || queryString === null)) {
    var path = window.location.href.split('?')[0].split(window.location.host)[1];

    if (queryString === null) {
      queryString = '';
    }

    var replaceURL = (path + queryString + '&' + url_getPageParams()).replace(/&+$/, "");

    if (options.clearPaginationQueryString) {
      replaceURL = path + queryString;
    }

    url_set(replaceURL);
  }
};

/**
 * Removes everything from the url
 */
var url_clearQueryString = exports.url_clearQueryString = function url_clearQueryString() {
  url_set(window.location.href.split('?')[0].split(window.location.host)[1].replace(/&+$/, ""));
};

/**
 * Reads the query string from a url
 */
var url_readQueryString = exports.url_readQueryString = function url_readQueryString() {
  return window.location.href.split('?')[1] || '';
};

/**
 * From: http://stackoverflow.com/questions/23481979/function-to-convert-url-hash-parameters-into-object-key-value-pairs
 * @param str
 * @returns {{}}
 */
var url_parseParams = exports.url_parseParams = function url_parseParams() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  var pieces = str.split("&"),
      data = {},
      i,
      parts;
  // process each query pair
  for (i = 0; i < pieces.length; i++) {
    parts = pieces[i].split("=");
    if (parts.length < 2) {
      parts.push("");
    }
    data[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);
  }

  return data;
};

/**
 * Fetches 
 * @returns {string}
 */
var url_getParam = exports.url_getParam = function url_getParam(param) {
  var tmpParams = url_parseParams(url_readQueryString());
  var params = tmpParams.hasOwnProperty(param) ? tmpParams[param] : {};
  var str = '';

  for (var key in params) {
    str += key + '=' + params[key] + '&';
  }

  return url_parseParams(str.slice(0, -1))[param];
};

/**
 * Gets the pagination query params from the url to preserve them on write
 */
var url_getPageParams = exports.url_getPageParams = function url_getPageParams() {
  var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "skip";
  var take = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "take";
  var page = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "page";

  var params = _.pick(url_parseParams(url_readQueryString()), [skip, take, page]);
  var str = '';

  for (var key in params) {
    str += key + '=' + params[key] + '&';
  }

  return str.slice(0, -1); // removes the last ampersand
  //return params;
};

/**
 * Converts a query string to a query object.
 * @param str
 */
var url_makeObjFromQueryString = exports.url_makeObjFromQueryString = function url_makeObjFromQueryString(str) {
  var queryString = decodeURI(str).split("&"),
      queryParams = {},
      segment = void 0,
      value = void 0,
      key = void 0;

  for (var i = 0; i < queryString.length; i++) {
    segment = queryString[i].split('=');
    key = segment[0];
    value = segment[1] && segment[1].charAt(0) === '[' ? decodeURIComponent(segment[1]) : segment[1];

    // Handle sort params nested object
    if (key && key.indexOf('sort-') > -1) {
      if (!queryParams.hasOwnProperty('sort')) {
        queryParams.sort = {};
      }

      queryParams.sort[key.split('sort-')[1]] = value;
    } else {
      //Filter params

      if (key && queryParams.hasOwnProperty(key)) {
        if (_.isArray(queryParams[key])) {
          queryParams[key].push(value); // Add the new value
        } else {
          queryParams[key] = [queryParams[key]]; // Extract the string value and transform to an array
          queryParams[key].push(value); //Add the new value
        }
      } else {
        if (key) {
          queryParams[key] = value; // First run, add the string
        }
      }
    }
  }

  return queryParams;
};