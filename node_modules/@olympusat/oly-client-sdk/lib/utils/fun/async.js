'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Fn Index: 
 *  async_waitForVar
*/

/**
 * Waits for a var to be available.
 * Defaults optional timeout to 10 sec.
 * Usage:
 * async_waitForVar(() => myVarToTest, () => {
 *  // THis is the resume callback. It runs once the var is no longer undefined
 * }, 10000, 250);
 */
var async_waitForVar = exports.async_waitForVar = function async_waitForVar() {
  var tryVar = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {
    return false;
  };
  var resume = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
  var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5000;
  var rate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 250;

  var elapsedTime = 0;
  var varCheck = setInterval(function () {
    var triedVar = tryVar();

    if (typeof triedVar !== 'undefined') {
      clearInterval(varCheck);
      resume();
    } else {
      if (elapsedTime >= timeout) {
        // Resume anyway so we don't hang the interface. 
        // Let undefined be handled by the caller
        clearInterval(varCheck);
        resume();
      } else {
        elapsedTime = elapsedTime + rate;
      }
    }
  }, rate);
};