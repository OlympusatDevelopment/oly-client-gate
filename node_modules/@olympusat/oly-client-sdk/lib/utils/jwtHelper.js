'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTokenExpirationDate = getTokenExpirationDate;
exports.isTokenExpired = isTokenExpired;

var _jwtDecode = require('jwt-decode');

var _jwtDecode2 = _interopRequireDefault(_jwtDecode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getTokenExpirationDate(token) {
  var decoded = (0, _jwtDecode2.default)(token);
  if (!decoded.exp) {
    return null;
  }

  var date = new Date(0); // The 0 here is the key, which sets the date to the epoch
  date.setUTCSeconds(decoded.exp);
  return date;
}

function isTokenExpired(token) {
  var date = getTokenExpirationDate(token);
  var offsetSeconds = 15;
  if (date === null) {
    return false;
  }

  // Pad the token time so there will be ample time after this check to pass the token to the api.
  // THis allows the api n seconds before the token expires, if we sent it on its threshold
  return !(date.valueOf() - offsetSeconds * 1000 > new Date().valueOf());
}