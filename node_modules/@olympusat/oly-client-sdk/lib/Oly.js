'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Oly = undefined;

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _socket = require('./utils/socket');

var _socket2 = _interopRequireDefault(_socket);

var _AppController = require('./controllers/AppController');

var _CognitoModel = require('./models/CognitoModel');

var _PermissionsController = require('./controllers/PermissionsController');

var _SessionController = require('./controllers/SessionController');

var _UserController = require('./controllers/UserController');

var _GateController = require('./controllers/GateController');

var _Subject = require('rxjs/Subject');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _fun = require('./utils/fun');

var _GA = require('./Services/GA');

var _GA2 = _interopRequireDefault(_GA);

var _Auth = require('./Services/Auth');

var _Auth2 = _interopRequireDefault(_Auth);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var pjson = require('../package.json');
var a$ = ['I\'d like to see Vemox be bigger than HBO', 'I\'ll fire the whole team', 'Just get it done or I\'ll fire the whole team', 'I have to cancel my meeting, I\'m in Aspen', 'Who is responsible for this?', 'As per me'];

/** 
 * Entry point for beginning the Gate behaviors & Auth flows
 * the config argument is the main configuration object passed to the instantitation
 * @param options
 * @constructor
 */
function Oly(options) {
  _utils2.default.options = options;

  var Auth0 = new _Auth2.default(options);
  var GA = new _GA2.default(options.GOOGLE_UA_ID);
  var Permissions = new _PermissionsController.PermissionsController(options);
  var Session = new _SessionController.SessionController(options);
  var User = new _UserController.UserController(options);
  var App = new _AppController.AppController(options);
  var CognitoModel = new _CognitoModel.CognitoModel(options);
  var GateController = new _GateController.GateController(options);

  // Build the public api available on the Oly window object
  window.Oly = {
    Auth0: Auth0,
    GA: GA,
    Permissions: Permissions,
    Session: Session,
    User: User,
    App: App,
    // UI : [Key aded by the Gate package] 
    CognitoModel: CognitoModel,
    GateController: GateController,
    options: options,
    /** 
     * A proxy for maxing xhr requests through the sdk to handle tokened requests, etc.
     */
    xhr: function xhr(url, data, opts) {
      return _utils2.default.call(url, data, opts);
    },
    meta: {
      version: pjson.version,
      loggedIn: false,
      _a$pertom: function _a$pertom() {
        return a$[Math.round(Math.random() * a$.length - 1)];
      },
      user: false,
      app: false,
      activeApps: [],
      sdkReady: false,
      spin: function spin() {
        // Just an easter egg for font-awesome sites
        var $body = document.body;
        $body.classList.contains('fa-spin') ? $body.classList.remove('fa-spin') : $body.classList.add('fa-spin');

        return "Dizzy yet?";
      },
      wobble: function wobble() {
        // Just an easter egg for animate.css
        var $body = document.body;
        $body.classList.contains('animated') ? $body.classList.remove('animated') : $body.classList.add('animated');
        $body.classList.contains('wobble') ? $body.classList.remove('wobble') : $body.classList.add('wobble');

        return "Now we're jiggling!";
      }
    },
    $tream: new _Subject.Subject() // An Observable that gets pushed data from ajax call responses
  };

  // Temp storage for deffered triggering of ready callback
  var tmpCbRetainer = function tmpCbRetainer() {};
  _init(options, User, App, Session, function (app) {
    return tmpCbRetainer();
  });

  return {
    ready: function ready(cb) {
      tmpCbRetainer = cb;
      window.Oly.meta.sdkReady = true;
    } // For delayed bootstrapping
  };
}

function _init(options, User, App, Session, cb) {
  var user = void 0,
      app = void 0;
  var token = Session.getToken() || undefined; // Undefined must be passed to the async_waitForVar fn if the val is false
  var fetchRan = false;

  // if(options.debugMode){
  console.log(pjson.name + ' | version ' + pjson.version);
  // }

  // If enabled, connect the socket for notification receiving/request data streaming
  if (options && options.IoT && options.IoT.enable) {
    _socket2.default.init(options);
  }

  // If there's a hash in the url, we're not ready to move forward until we get the window.Oly.meta.loggedIn = true;
  window.Oly.Session.checkAndOrRenewToken().then(function (token) {
    if (token) {
      fetchInitData(cb);
    } else {
      document.dispatchEvent(new CustomEvent("olySdkReady"));
      cb();
    }
  });

  function fetchInitData(cb) {
    fetchRan = true;

    // Do a fetch for the user & app data on load to anchor to localStorage & derive user app permissions for current app
    _bluebird2.default.all([User.getCurrentUser(), // Side effect: call sets the window.Oly.meta.user prop
    App.getCurrentApp(options.appSlug), // Side effect: call sets the window.Oly.meta.app prop
    App.listActive() // Side effect: call sets the window.Oly.meta.activeApps prop
    ]).then(function (res) {
      var app = res[1];

      setAppUserPermissions(app); // Side effect: call sets the window.Oly.User.currentAppUserPermissions prop

      document.dispatchEvent(new CustomEvent("olySdkReady"));
      //Dispatch a ready event for any app setups listening.
      // Used by the oly-client-gate in Gate.js
      document.dispatchEvent(new CustomEvent("olySdkInitDataReady"));
      cb(app);
    });
  }
}

// Deduces user permissions for the current app
function setAppUserPermissions(app) {
  if (app) {
    window.Oly.User.currentAppUserPermissions = _underscore2.default.intersection(app.appPermissions, window.Oly.Permissions.getPermissions());
  }
}

exports.Oly = Oly;