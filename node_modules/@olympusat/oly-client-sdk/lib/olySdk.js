'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _promisePolyfill = require('promise-polyfill');

var _promisePolyfill2 = _interopRequireDefault(_promisePolyfill);

var _Oly = require('./Oly');

var _Storage = require('./Storage');

var _Events = require('./Events');

var _UsersModel = require('./models/UsersModel');

var _AppsModel = require('./models/AppsModel');

var _AppController = require('./controllers/AppController');

var _PermissionsController = require('./controllers/PermissionsController');

var _UserController = require('./controllers/UserController');

var _GateController = require('./controllers/GateController');

var _SessionController = require('./controllers/SessionController');

var _Auth = require('./Services/Auth');

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// "polyfill" for missing Promise when running in the Meteor environment
if (!window.Promise) {
    window.Promise = _promisePolyfill2.default;
} // import 'aws-sdk/lib/browser_loader';// Forces the sdk to run as browser, not node. See: https://github.com/meteor/meteor/issues/6890#issuecomment-287592398


// console.log('Browser connected to LAN',window.navigator.onLine);

/**
 * These are exposed by the oly-sdk npm package import
 */
exports.default = {
    Oly: _Oly.Oly,
    Gate: _Oly.Oly, //Legacy support
    Storage: _Storage.Storage,
    Events: _Events.Events,
    Controllers: {
        PermissionsController: _PermissionsController.PermissionsController,
        UserController: _UserController.UserController,
        GateController: _GateController.GateController,
        SessionController: _SessionController.SessionController,
        AppController: _AppController.AppController
    },
    Models: {
        UsersModel: _UsersModel.UsersModel,
        AppsModel: _AppsModel.AppsModel
    },
    Services: {
        Auth: _Auth.Auth
    },
    utils: _utils2.default,

    /**
     * A proxy for maxing xhr requests through the sdk to handle tokened requests, etc.
     */
    xhr: function xhr(url, data, opts) {
        return _utils2.default.call(url, data, opts);
    }
};