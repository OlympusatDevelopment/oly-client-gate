'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _auth0Js = require('auth0-js');

var _auth0Js2 = _interopRequireDefault(_auth0Js);

var _constants = require('../utils/constants');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _jwtHelper = require('../utils/jwtHelper');

var _Storage = require('../Storage');

var _fun = require('../utils/fun');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Auth = function () {
  function Auth(options) {
    _classCallCheck(this, Auth);

    this.options = options;
    this.state = window.btoa('oly-client-sdk');
    this.auth0 = new _auth0Js2.default.WebAuth({
      domain: 'oly.auth0.com',
      clientID: '3aJ3wYVi0MxaX3TryA4cuYELd4JlX1VL',
      // redirectUri: window.location.href,
      redirectUri: window.location.href,
      audience: 'https://oly.auth0.com/userinfo',
      responseType: 'token id_token',
      scope: 'openid email profile',
      state: this.state,
      nonce: this.state
    });

    this.storage = new _Storage.Storage(this.options);

    this.login = this.login.bind(this);
    this.logout = this.logout.bind(this);
    this.handleAuthentication = this.handleAuthentication.bind(this);
    this.isAuthenticated = this.isAuthenticated.bind(this);
    // this._requestAWSCredentials = this._requestAWSCredentials.bind(this);
  }

  _createClass(Auth, [{
    key: 'login',
    value: function login() {
      /**
        * Register that the user is authenticating
        */
      window.Oly.GA.event({
        eventCategory: 'Authentication',
        eventAction: 'Authentication Request',
        eventLabel: ''
      });
      // console.log('LOGIN ACTION AUTH', this.state);
      this.auth0.authorize({ state: this.state, nonce: this.state });
    }
  }, {
    key: 'refreshSession',
    value: function refreshSession() {
      var self = this;
      return new _bluebird2.default(function (resolve, reject) {
        var token = self.storage.get(_constants.AUTH_TOKEN_KEY);

        // Check if there is an auth0 id token in storage before issuing a refresh
        if (token && (0, _jwtHelper.isTokenExpired)(token)) {
          self.auth0.checkSession({
            redirectUri: location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/auth'
          }, function (err, authResult) {

            if (err) {
              console.log(err);
              localStorage.clear();
              window.Oly.meta.loggedIn = false; //  Dead end, clear storage and start over
              resolve(false);
            } else {
              self.setSession(authResult);
              resolve(authResult);
            }
          });
          // self.auth0.renewAuth(
          //   {
          //     redirectUri: window.location.protocol + '//' + window.location.hostname,
          //     // usePostMessage: true
          //   },
          //   function (err, result) {
          //     console.log('RENEW ', err, result);
          //     if (err) {
          //       console.log(err);
          //       resolve(false);
          //     } else {
          //       self.setSession(result);
          //       resolve(result);
          //     }
          //   }
          // );
        } else {
          window.Oly.meta.loggedIn = false;
          localStorage.clear();
          resolve(false);
        }
      });
    }
  }, {
    key: 'handleAuthentication',
    value: function handleAuthentication(hash, cb) {
      var _this = this;

      var self = this;

      if (hash || window.location.hash) {
        this.auth0.parseHash({ state: this.state, hash: hash || window.location.hash, nonce: this.state }, function (err, authResult) {

          if (authResult && authResult.accessToken && authResult.idToken) {
            _this.setSession(authResult);
            cb(authResult);

            /**
             * Log that the user is authenticating
             */
            window.Oly.GA.event({
              eventCategory: 'Authentication',
              eventAction: 'Authenticated',
              eventLabel: authResult.idTokenPayload.email
            });
          } else if (err) {
            window.Oly.meta.loggedIn = false;
            console.log(err);
            cb(false);
          }
        });
      } else {
        // CHeck session is the primary way to check if we logged in via SSO on another domain
        self.auth0.checkSession({
          redirectUri: location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/auth'
        }, function (err, authResult) {
          if (err) {
            console.log(err);
            localStorage.clear();
            window.Oly.meta.loggedIn = false; //  Dead end, clear storage and start over
            cb(false);
          } else {
            self.setSession(authResult);
            cb(authResult);
          }
        });
      }
    }
  }, {
    key: 'setSession',
    value: function setSession(authResult) {
      if (authResult) {
        window.Oly.meta.loggedIn = true;
        // Set the time that the access token will expire at
        var expiresAt = JSON.stringify(authResult.expiresIn * 1000 + new Date().getTime());
        localStorage.setItem('access_token', authResult.accessToken);
        localStorage.setItem(_constants.AUTH_TOKEN_KEY, authResult.idToken);
        localStorage.setItem('expires_at', expiresAt);

        // Announce that the session has been set and is ready to be used
        document.dispatchEvent(new CustomEvent("olySdkSessionSet"));
      }
    }
  }, {
    key: 'logout',
    value: function logout() {
      var olyAuthUser = window.Oly.User.getOlyAuthUser();
      window.Oly.GA.event({
        eventCategory: 'Authentication',
        eventAction: 'Logout',
        eventLabel: olyAuthUser ? olyAuthUser.email : ''
      });

      window.Oly.meta.loggedIn = false;
      this.auth0.logout();
      this.auth0.clearSession();
      localStorage.clear();

      var cookie = document.cookie.split(';');

      for (var i = 0; i < cookie.length; i++) {

        var chip = cookie[i],
            entry = chip.split("="),
            name = entry[0];

        document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
      }

      // navigate to the home route
      window.location.href = "/";
    }
  }, {
    key: 'isAuthenticated',
    value: function isAuthenticated() {
      // Check whether the current time is past the 
      // access token's expiry time
      var expiresAt = JSON.parse(localStorage.getItem('expires_at'));
      return new Date().getTime() < expiresAt;
    }

    /**
       * Requests AWS Credentials
       * @param idToken
       * @private
       */
    // _requestAWSCredentials(idToken, user) {
    //   const self = this;

    //   return new Promise((resolve, reject) => {
    //     const AWS_ROLE_ARN = 'arn:aws:iam::603127604728:role/Auth0_Portal',
    //       AWS_SAML_PROVIDER_ARN = 'arn:aws:iam::603127604728:saml-provider/oly.auth0.com_SAML';

    //     var request = require('browser-request');
    //     var options = {
    //       method: 'POST',
    //       url: 'https://oly.auth0.com/delegation',
    //       body:
    //         {
    //           client_id: '3aJ3wYVi0MxaX3TryA4cuYELd4JlX1VL',
    //           grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
    //           id_token: idToken,
    //           target: '3aJ3wYVi0MxaX3TryA4cuYELd4JlX1VL',
    //           api_type: 'aws',
    //           role: AWS_ROLE_ARN,
    //           principal: AWS_SAML_PROVIDER_ARN
    //         },
    //       json: true
    //     };

    //     /**
    //      * Using the Auth0 token, request credentials from AWS via delegation
    //      */
    //     request(options, function (error, response, body) {
    //       // if (error) throw new Error(error);
    //       window.Oly.CognitoModel.setCredentials(body.Credentials, user, () => { });

    //     });
    //   });
    // }

  }]);

  return Auth;
}();

exports.default = Auth;