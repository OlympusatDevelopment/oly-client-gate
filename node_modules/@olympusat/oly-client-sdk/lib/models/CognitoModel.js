'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CognitoModel = undefined;

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

var _utils = require('../utils');

var _utils2 = _interopRequireDefault(_utils);

var _Events = require('../Events');

var _Storage = require('../Storage');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

require('aws-sdk');

var _constants = require('../utils/constants');

require('aws-sdk/lib/browser_loader');

var _browser = require('aws-sdk/browser');

var _browser2 = _interopRequireDefault(_browser);

var _amazonCognitoIdentityJs = require('amazon-cognito-identity-js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } // Forces browser code load instead of nodejs code

// } from "aws-sdk";

/**
 * See this documentation for help on common activities:
 * http://docs.aws.amazon.com/cognito/latest/developerguide/using-amazon-cognito-user-identity-pools-javascript-examples.html#using-amazon-cognito-user-identity-pools-javascript-examples-updating-attributes
 * https://github.com/aws/amazon-cognito-identity-js
 * http://docs.aws.amazon.com/cognito/latest/developerguide/using-amazon-cognito-user-identity-pools-javascript-examples.html
 * http://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-using-tokens-with-identity-providers.html
 * */
var CognitoModel = exports.CognitoModel = function CognitoModel(options) {
  var events = new _Events.Events(options);
  var storage = new _Storage.Storage(options);

  var APP_CLIENT_ID = options.APP_CLIENT_ID,
      USER_POOL_ID = options.USER_POOL_ID,
      IDENTITY_POOL_ID = options.IDENTITY_POOL_ID,
      S3_BUCKET = options.S3_BUCKET;


  _browser2.default.config.region = 'us-east-1';
  _browser2.default.config.credentials = new _browser.CognitoIdentityCredentials({
    IdentityPoolId: IDENTITY_POOL_ID
  });

  var cognitoidentityserviceprovider = new _browser.CognitoIdentityServiceProvider();
  var userPool = new _amazonCognitoIdentityJs.CognitoUserPool({
    UserPoolId: USER_POOL_ID,
    ClientId: APP_CLIENT_ID
  });

  return {
    /**
    * Retrieve the user from session
    * @returns {{}}
    */
    getUser: function getUser() {
      return new _bluebird2.default(function (resolve, reject) {
        var data = {
          UserPoolId: USER_POOL_ID,
          ClientId: APP_CLIENT_ID
        };
        var userPool = new _browser.CognitoIdentityServiceProvider.CognitoUserPool(data);
        var cognitoUser = userPool.getCurrentUser();

        if (cognitoUser != null) {
          cognitoUser.getSession(function (err, session) {
            if (err) {
              (0, _utils.l)(err);return;
            }
            // Now logged in/authenticated

            // Fetch the user attributes to extract the profile
            cognitoUser.getUserAttributes(function (err, attr) {
              var attributes = {};

              if (err) {

                // // Clear user token and user data from localStorage
                // AWS.config.credentials.clearCachedId();
                var params = {
                  Error: err,
                  session: session,
                  sessionIsValid: session.isValid()
                };

                events.onGetUserFail(params); //HOOK

                resolve(params);
                return false;
              }

              // Flatten user attributes
              attr.forEach(function (attribute) {
                attributes[attribute.Name] = attribute.Value;
              });

              attributes.profile = JSON.parse(_underscore2.default.filter(attr, { Name: 'profile' })[0].Value);

              var userData = {
                attributes: attributes,
                //cognitoUser,
                session: session,
                sessionIsValid: session.isValid()
              };

              events.onGetUserSuccess(userData); //HOOK

              resolve(userData);
            });
          });
        } else {
          resolve({
            cognitoUser: null,
            session: null,
            sessionIsValid: false,
            profile: null
          });
        }
      });
    },


    /**
     * Create a user on signup
     * @param user
     * @returns {Promise}
     */
    createUser: function createUser(user) {
      return new _bluebird2.default(function (resolve, reject) {
        var email = user.email,
            password = user.password,
            given_name = user.given_name,
            family_name = user.family_name,
            userProfile = {
          "role": ['user']
        },
            attributeList = [new _amazonCognitoIdentityJs.CognitoUserAttribute({
          Name: 'email',
          Value: email
        }), new _amazonCognitoIdentityJs.CognitoUserAttribute({
          Name: 'given_name',
          Value: given_name
        }), new _amazonCognitoIdentityJs.CognitoUserAttribute({
          Name: 'family_name',
          Value: family_name
        }), new _amazonCognitoIdentityJs.CognitoUserAttribute({
          Name: 'profile',
          Value: JSON.stringify(userProfile)
        })];


        userPool.signUp(email, password, attributeList, null, function (err, result) {
          if (err) {
            events.onAccountCreatedFail({ Error: err }); //HOOK

            resolve({ Error: err });
          } else {
            events.onAccountCreatedSuccess(result.user); //HOOK

            resolve(result.user);
          }
        });
      });
    },


    /**
     * verifyUser
     * @param user
     * @returns {Promise}
     */
    verifyUser: function verifyUser(user) {
      return new _bluebird2.default(function (resolve, reject) {
        var email = user.email,
            code = user.code;


        _browser2.default.config.update({
          region: 'us-east-1',
          credentials: new _browser.CognitoIdentityCredentials({
            IdentityPoolId: IDENTITY_POOL_ID
          })
        });

        var params = {
          ClientId: APP_CLIENT_ID,
          ConfirmationCode: code,
          Username: email
        };
        new _browser.CognitoIdentityServiceProvider({}).confirmSignUp(params, function (err, data) {
          if (err) {
            events.onUserVerifiedFail({ Error: err }); //HOOK

            resolve({ Error: err });
          } else {
            events.onUserVerifiedSuccess(data); //HOOK

            // Need to store that this is a new user
            // @todo move this to the user profile for persistence
            // storage.set(NEW_USER_LS_KEY, true);

            resolve(data);
          }
        });
      });
    },


    /**
     * Used by Federated authentication flows
     * @param {*} Credentials 
     */
    setCredentials: function setCredentials(_ref, user, cb) {
      var AccessKeyId = _ref.AccessKeyId,
          SecretAccessKey = _ref.SecretAccessKey,
          SessionToken = _ref.SessionToken,
          Expiration = _ref.Expiration;

      _browser2.default.config.update({
        region: 'us-east-1',
        // credentials: new CognitoIdentityCredentials({
        credentials: {
          accessKeyId: AccessKeyId,
          secretAccessKey: SecretAccessKey,
          sessionToken: SessionToken,
          expireTime: Expiration
        }
      });

      cb();
    },


    /**
     * Log in the user
     * @param user
     * @returns {Promise}
     */
    login: function login(user) {
      return new _bluebird2.default(function (resolve, reject) {
        _browser2.default.config.credentials.clearCachedId();

        var email = user.email,
            password = user.password;

        var authenticationData = {
          Username: email,
          Password: password
        },
            userData = {
          Username: email,
          Pool: userPool
        },
            authenticationDetails = new _browser.CognitoIdentityServiceProvider.AuthenticationDetails(authenticationData),
            cognitoUser = new _browser.CognitoIdentityServiceProvider.CognitoUser(userData);

        // Authenticate the user
        //https://github.com/aws/amazon-cognito-identity-js
        //http://docs.aws.amazon.com/cognito/latest/developerguide/using-amazon-cognito-user-identity-pools-javascript-examples.html
        cognitoUser.authenticateUser(authenticationDetails, {
          onSuccess: function onSuccess(result) {
            var token = result.getIdToken().getJwtToken();

            _browser2.default.config.credentials = new _browser2.default.CognitoIdentityCredentials({
              IdentityPoolId: IDENTITY_POOL_ID,
              Logins: _defineProperty({}, 'cognito-idp.us-east-1.amazonaws.com/' + USER_POOL_ID, token)
            });

            events.onLoginSuccess(result); //HOOK

            resolve(result);
          },
          onFailure: function onFailure(err) {
            events.onLoginFail({ Error: err }); //HOOK

            resolve({ Error: err });
          }
        });
      });
    },


    /**
     * Log in the user
     * @param user
     * @returns {Promise}
     */
    // loginAuth0Provider({ Logins = {}, user }) {
    //   const self = this;

    //   return new Promise((resolve, reject) => {
    //     AWS.config.credentials.clearCachedId();

    //     // Authenticate the user
    //     AWS.config.credentials = new AWS.CognitoIdentityCredentials({
    //       IdentityPoolId: IDENTITY_POOL_ID,
    //       Logins
    //     });

    //     const userData = {
    //       Username: user.email,
    //       Pool: userPool
    //     };
    //     const cognitoUser = new CognitoIdentityServiceProvider.CognitoUser(userData);
    //     events.onLoginSuccess(cognitoUser);//HOOK
    //     console.log('Auth Provider  User', cognitoUser);
    //     resolve(cognitoUser);
    //   });
    // },

    /**
     * Request to refresh the session via the refresh token
     */
    refreshSession: function refreshSession() {
      var self = this;
      return new _bluebird2.default(function (resolve, reject) {
        var cognitoUser = userPool.getCurrentUser();

        // "polyfill" for missing STS constructor when running in the Meteor environment
        if (window.AWS) {
          window.STS = window.AWS.STS;
        }

        if (cognitoUser != null) {
          cognitoUser.getSession(function (err, session) {
            if (err) {
              events.onRefreshSessionFail({ Error: err }); //HOOK

              resolve(false);
              return;
            }

            window.AWS.config.credentials.refresh(function () {
              window.AWS.config.credentials.get(function () {
                events.onRefreshSessionSuccess(session); //HOOK

                resolve(session.isValid());
              });
            });
          });
        } else {
          // events.onRefreshSessionFail({ Error: 'No current cognito user' });//HOOK
          // window.Oly.Auth.logout();
          // self.logout();
          // console.log('No cognito user, logout triggered to restart');
          resolve(false);
        }
      });
    },


    /**
     * Clear logs the user out of cognito & the user session from localstorage
     */
    logout: function logout() {
      var self = this;
      return new _bluebird2.default(function (resolve, reject) {
        _browser2.default.config.update({
          region: 'us-east-1',
          credentials: new _browser.CognitoIdentityCredentials({
            IdentityPoolId: IDENTITY_POOL_ID
          })
        });

        self.getUser().then(function (user) {
          if (user && user.attributes) {
            // l(user);
            var attr = user.attributes || {};
            var email = attr.email;
            var userData = {
              Username: email,
              Pool: userPool
            },
                cognitoUser = new _browser.CognitoIdentityServiceProvider.CognitoUser(userData);

            if (cognitoUser != null) {
              cognitoUser.signOut();
              cognitoUser.clearCachedTokens();
            }
          }

          // Clear user token and user data from localStorage
          _browser2.default.config.credentials.clearCachedId();
          storage.clear();

          events.onLogoutSuccess(user); //HOOK
          resolve();
        }).catch(function (e) {
          events.onLogoutFail({ Error: e }); //HOOK
        });
      });
    },


    /**
     * Reset Password
     * @param email
     */
    resetPassword: function resetPassword(user) {
      return new _bluebird2.default(function (resolve, reject) {
        _browser2.default.config.update({
          region: 'us-east-1',
          credentials: new _browser.CognitoIdentityCredentials({
            IdentityPoolId: IDENTITY_POOL_ID
          })
        });

        var email = user.email,
            userData = {
          Username: email,
          Pool: userPool
        },
            cognitoUser = new _browser.CognitoIdentityServiceProvider.CognitoUser(userData);


        cognitoUser.forgotPassword({
          onSuccess: function onSuccess(result) {
            events.onPasswordResetSuccess(result); //HOOK

            resolve(result);
          },
          onFailure: function onFailure(err) {
            events.onPasswordResetFail({ Error: err }); //HOOK

            resolve(err);
          },
          inputVerificationCode: function inputVerificationCode(result) {
            events.onPasswordResetInputVerificationCodeSuccess(result); //HOOK -- longerst fn name ever ;)

            resolve(result);
            //var verificationCode = prompt('Please input verification code ' ,'');
            //var newPassword = prompt('Enter new password ' ,'');
            //cognitoUser.confirmPassword(verificationCode, newPassword, this);
          }
        });
      });
    },


    /**
     * Confirms the new password using verification code & new password
     * @param user
     * @returns {Promise} 
     */
    confirmNewPassword: function confirmNewPassword(user) {
      return new _bluebird2.default(function (resolve, reject) {
        _browser2.default.config.update({
          region: 'us-east-1',
          credentials: new _browser.CognitoIdentityCredentials({
            IdentityPoolId: IDENTITY_POOL_ID
          })
        });

        var email = user.email,
            code = user.code,
            password = user.password,
            userData = {
          Username: email,
          Pool: userPool
        },
            cognitoUser = new _browser.CognitoIdentityServiceProvider.CognitoUser(userData);


        cognitoUser.confirmPassword(code, password, {
          onSuccess: function onSuccess(result) {
            events.onConfirmNewPasswordSuccess(result); //HOOK

            resolve(result);
          },
          onFailure: function onFailure(err) {
            events.onConfirmNewPasswordFail({ Error: err }); //HOOK

            resolve({ Error: err });
          }
        });
      });
    }
  };
};