'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Explicitely create the event handlers here for clarity about what hooks are available.
 * It is possible to let hooks register themselves, but that would be hard to reason. it is better to see the names. IMHO
 * @param {*} options 
 */

var Events = exports.Events = function Events(options) {
    var registeredEvents = {
        onGateShow: function onGateShow(args) {
            return doHook('onGateShow', args, options);
        },
        onGateHide: function onGateHide(args) {
            return doHook('onGateHide', args, options);
        },

        onCentralizerShow: function onCentralizerShow(args) {
            return doHook('onCentralizerShow', args, options);
        },
        onCentralizerHide: function onCentralizerHide(args) {
            return doHook('onCentralizerHide', args, options);
        },

        onCentralizerAppsOpen: function onCentralizerAppsOpen(args) {
            return doHook('onCentralizerAppsOpen', args, options);
        },
        onCentralizerAppsClose: function onCentralizerAppsClose(args) {
            return doHook('onCentralizerAppsClose', args, options);
        },

        onCentralizerUserOpen: function onCentralizerUserOpen(args) {
            return doHook('onCentralizerUserOpen', args, options);
        },
        onCentralizerUserClose: function onCentralizerUserClose(args) {
            return doHook('onCentralizerUserClose', args, options);
        },

        onLoginSuccess: function onLoginSuccess(args) {
            return doHook('onLoginSuccess', args, options);
        },
        onLoginFail: function onLoginFail(args) {
            return doHook('onLoginFail', args, options);
        },

        onLogoutSuccess: function onLogoutSuccess(args) {
            return doHook('onLogoutSuccess', args, options);
        },
        onLogoutFail: function onLogoutFail(args) {
            return doHook('onLogoutFail', args, options);
        },

        onPasswordResetSuccess: function onPasswordResetSuccess(args) {
            return doHook('onPasswordResetSuccess', args, options);
        },
        onPasswordResetInputVerificationCodeSuccess: function onPasswordResetInputVerificationCodeSuccess(args) {
            return doHook('onPasswordResetInputVerificationCodeSuccess', args, options);
        },
        onPasswordResetFail: function onPasswordResetFail(args) {
            return doHook('onPasswordResetFail', args, options);
        },

        onConfirmNewPasswordSuccess: function onConfirmNewPasswordSuccess(args) {
            return doHook('onConfirmNewPasswordSuccess', args, options);
        },
        onConfirmNewPasswordFail: function onConfirmNewPasswordFail(args) {
            return doHook('onConfirmNewPasswordFail', args, options);
        },

        onAccountCreatedSuccess: function onAccountCreatedSuccess(args) {
            return doHook('onAccountCreatedSuccess', args, options);
        },
        onAccountCreatedFail: function onAccountCreatedFail(args) {
            return doHook('onAccountCreatedFail', args, options);
        },

        onUserVerifiedSuccess: function onUserVerifiedSuccess(args) {
            return doHook('onUserVerifiedSuccess', args, options);
        },
        onUserVerifiedFail: function onUserVerifiedFail(args) {
            return doHook('onUserVerifiedFail', args, options);
        },

        onGetUserSuccess: function onGetUserSuccess(args) {
            return doHook('onGetUserSuccess', args, options);
        },
        onGetUserFail: function onGetUserFail(args) {
            return doHook('onGetUserFail', args, options);
        },

        onRefreshSessionSuccess: function onRefreshSessionSuccess(args) {
            return doHook('onRefreshSessionSuccess', args, options);
        },
        onRefreshSessionFail: function onRefreshSessionFail(args) {
            return doHook('onRefreshSessionFail', args, options);
        }
    };

    return registeredEvents;
};

/**
 * Checks that event hook exists then calls it
 * NOTE : Provide window.Oly.options as a default at runtime if it wasn't provided on instantiation
 * @param {*} hook 
 * @param {*} options 
 * @param {*} args 
 */
function doHook(hook, args) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window.Oly.options;

    if (options && options.events && options.events[hook]) {
        options.events[hook](args);
    }
}