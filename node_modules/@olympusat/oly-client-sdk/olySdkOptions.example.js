import {
  APP_CLIENT_ID,
  USER_POOL_ID,
  IDENTITY_POOL_ID,
  ENDPOINT_USERS,
  ENDPOINT_MS_USERS,
  ENDPOINT_GROUPS,
  ENDPOINT_APPS,
  IOT_HOST,
  IOT_AUTH_ROL
} from './utils/config';

import { MS_USER_LS_KEY } from './utils/constants';

const debugMode = true,
  hookLogger = debugMode ? console.log : ()=>{};

export default ()=>({
  profileSettingsLink : '/account',
  // title:'',
  // displayOnAuthPage : true,// If true, the gate will pop up over page as a modal otherwise it will redirect to /auth page
  onLoginRedirectTo:'/market',// For use with the displayOnAuthPage prop to redirect user after successful login
  APP_CLIENT_ID,
  USER_POOL_ID,
  IDENTITY_POOL_ID,
  ENDPOINT_USERS,   
  ENDPOINT_GROUPS,
  ENDPOINT_APPS, 
  debugMode,//boolean | turns internal console logs on and off
  IoT:{
      enable:true,
      topicName: "alexa/query",
      appUser: localStorage.getItem(MS_USER_LS_KEY),
      appUserLSKey: MS_USER_LS_KEY,
      beforeRedirect: url=>`/market${url}&view=buyer`// Hook for mutating a redirect url request
  },
  events:{
      onGateShow : (args,options)=>hookLogger('HOOK | onGateShow',args,options),
      onGateHide : (args,options)=>hookLogger('HOOK | onGateHide',args,options),

      onCentralizerShow : (args,options)=>hookLogger('HOOK | onCentralizerShow',args,options),
      onCentralizerHide : (args,options)=>hookLogger('HOOK | onCentralizerHide',args,options), 

      onCentralizerAppsOpen : (args,options)=>hookLogger('HOOK | onCentralizerAppsOpen',args,options), 
      onCentralizerAppsClose : (args,options)=>hookLogger('HOOK | onCentralizerAppsClose',args,options),

      onCentralizerUserOpen : (args,options)=>hookLogger('HOOK | onCentralizerUserOpen',args,options), 
      onCentralizerUserClose : (args,options)=>hookLogger('HOOK | onCentralizerUserClose',args,options), 

      onLoginSuccess : (args,options)=>hookLogger('HOOK | onLoginSuccess',args,options),
      onLoginFail : (args,options)=>hookLogger('HOOK | onLoginFail',args,options),
  
      onLogoutSuccess : (args,options)=>hookLogger('HOOK | onLogoutSuccess',args,options),
      onLogoutFail : (args,options)=>hookLogger('HOOK | onLogoutFail',args,options),

      onPasswordResetSuccess : (args,options)=>hookLogger('HOOK | onPasswordResetSuccess',args,options),
      onPasswordResetInputVerificationCodeSuccess : (args,options)=>hookLogger('HOOK | onPasswordResetInputVerificationCodeSuccess',args,options),
      onPasswordResetFail : (args,options)=>hookLogger('HOOK | onPasswordResetFail',args,options),
      
      onConfirmNewPasswordSuccess : (args,options)=>hookLogger('HOOK | onConfirmNewPasswordSuccess',args,options),
      onConfirmNewPasswordFail : (args,options)=>hookLogger('HOOK | onConfirmNewPasswordFail',args,options),

      onAccountCreatedSuccess : (args,options)=>hookLogger('HOOK | onAccountCreatedSuccess',args,options),
      onAccountCreatedFail : (args,options)=>hookLogger('HOOK | onAccountCreatedFail',args,options),

      onUserVerifiedSuccess : (args,options)=>hookLogger('HOOK | onUserVerifiedSuccess',args,options),
      onUserVerifiedFail : (args,options)=>hookLogger('HOOK | onUserVerifiedFail',args,options),

      onGetUserSuccess : (args,options)=>hookLogger('HOOK | onGetUserSuccess',args,options),
      onGetUserFail : (args,options)=>hookLogger('HOOK | onGetUserFail',args,options),

      onRefreshSessionSuccess : (args,options)=>hookLogger('HOOK | onRefreshSessionSuccess',args,options),
      onRefreshSessionFail : (args,options)=>{
        hookLogger('HOOK | onRefreshSessionFail',args,options);
        if(args && args.Error && args.Error === "No current cognito user"){
          window.location.href = '/';
        }
      },
  }
});